---
import { iconPaths } from '@utils/IconPaths';
import type { IconName } from '@utils/IconPaths';
import Icon from '@components/Icon.astro';


interface Props {
  textLinks: Array<{ label: string; href: string }>;
  iconsLinks: Array<{ label: string; href: string; icon: IconName }>;
  currentPath: string;
}

const { textLinks, iconsLinks, currentPath } = Astro.props;

const iconThemeDark = iconPaths['moon'];
const iconThemeLight = iconPaths['sun'];

// Función helper para determinar si un enlace está activo
const isActiveLink = (linkHref: string, URLPath: string) => {
  // Coincidencia exacta
  if (URLPath === linkHref) return true;
  
  // Para rutas que no sean la home
  if (linkHref !== '/' && URLPath.startsWith(linkHref)) return true;
  
  // Caso especial: cuando estás en /ejemplo, el enlace /portfolio debe estar activo
  if (URLPath == '/ejemplo' && linkHref === '/portfolio') return true;
  
  return false;
};
---

<script>
  const initThemeToggle = () => {
    const switchTheme = document.getElementById('btn-theme');
    if (!switchTheme) return;

    const text = document.querySelector('.btn-theme__text');
    const icon1 = document.querySelector('.btn-theme__icon--1');
    const icon2 = document.querySelector('.btn-theme__icon--2');

    const updateButton = (theme: string) => {
      if (!text || !icon1 || !icon2) return;
      text.textContent = theme === 'dark' ? 'Dark' : 'Light';
      icon1.classList.toggle('hidden', theme !== 'dark');
      icon2.classList.toggle('hidden', theme === 'dark');
      switchTheme.setAttribute('aria-checked', theme === 'dark' ? 'true' : 'false');
    };

    const toggleTheme = () => {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
      const nextTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', nextTheme);
      localStorage.setItem('theme', nextTheme);
      updateButton(nextTheme);
    };

    switchTheme.addEventListener('click', toggleTheme);

    const savedTheme = localStorage.getItem('theme') || 'dark';
    document.documentElement.setAttribute('data-theme', savedTheme);
    updateButton(savedTheme);
  }

  document.addEventListener('DOMContentLoaded', () => {
    initThemeToggle();
  });
</script>

<nav class='navbar flex items-center gap-4 lg:gap-6' aria-label="Menú principal">
  <ul class='nav-items hidden md:flex md:gap-4 lg:gap-6'>
    {
      textLinks.map(({ label, href }) => (
        <li class='nav-items__item'>
          <span class="triangle triangle-1"></span>
          <a 
          href={href}
          class:list={['nav-items__link', {'active': isActiveLink(href, currentPath)}]}
          >
            {label}

            <span class="cross-decoration cross-decoration-1">+</span>
            <span class="cross-decoration cross-decoration-2">+</span>
            <span class="cross-decoration cross-decoration-3">+</span>
          </a>
          <span class="triangle triangle-2"></span>
        </li>
      ))
    }
  </ul>
  <ul class='nav-icons hidden md:flex md:gap-5 lg:gap-6'>
    {
      iconsLinks.map(({ label, href, icon }) => (
        <li class='grow'>
          <a class='nav-icons__link' href={href} title={label} target="_blank" rel="noopener noreferrer">
            <span class='sr-only'>{label}</span>
            <span class="nav-icons__corner corner-1"></span>
            <span class="nav-icons__corner corner-2"></span>
            <span class="nav-icons__bg-blink"></span>
            <Icon icon={icon} size="20px" class="nav-icons__icon" style={'grid-area: stack; z-index: -1;'}/>
          </a>
        </li>
      ))
    }
  </ul>

  <button id='btn-theme' class="btn-theme" aria-label="cambiar de color" role="switch" aria-checked="false" title="modo de color">
    <span class='btn-theme__title'>
      Color
      <i class="btn-theme__kanji">カラー</i>
    </span>
    <span class="btn-theme__color-content">
      <span class='btn-theme__text'></span>
      <svg 
        class='btn-theme__icon btn-theme__icon--1' 
        xmlns='http://www.w3.org/2000/svg' 
        aria-hidden='true' 
        set:html={iconThemeDark[0]} 
        viewBox={iconThemeDark[1]}
      ></svg>
      <svg
        class='btn-theme__icon btn-theme__icon--2' 
        xmlns='http://www.w3.org/2000/svg' 
        aria-hidden='true' 
        set:html={iconThemeLight[0]} 
        viewBox={iconThemeLight[1]}
      ></svg>
    </span>
  </button>
</nav>
<!-- Navbar links -->
<style lang='scss'>
  .navbar{
    .nav-items{
      &__item{
        display: grid;
        justify-items: center;
        gap: 8px;
  
        .triangle{
          visibility: hidden;
          width: 0;
          height: 0;
          border-top: solid 8px var(--color-main-3);
          border-right: solid 5px transparent;
          border-left: solid 5px transparent;
          opacity: 0.6;
          animation: blink-in 0.3s infinite cubic-bezier(1,0,0,1) forwards;

          &-2{
            transform: rotate(180deg);
          }
        }

        &:has(.nav-items__link:hover){
          .triangle{
            visibility: visible;
          }
        }
      }

      &__link{
        border-bottom: 1px solid var(--color-main-2);
        position: relative;
        padding: 8px 16px;
        display: inline-block;
        transition: 0.35s;
        text-transform: uppercase;
        font-size: var(--size-12px);
        text-shadow: var(--color-text) 0px 0px 8px;
        font-family: var(--font-family-2);

        &::after {
          content: '';
          position: absolute;
          bottom: -1px;
          -moz-right: 0px;
          right: 0px;
          display: block;
          width: 15px;
          height: 15px;
          background-color: var(--color-main-2);
          clip-path: polygon(66% 0, 100% 0, 100% 100%, 0% 100%);
          transition: opacity .3s, transform .3s cubic-bezier(.455, .03, .515, .955);
        }

        &.active{
          border-bottom: 1px solid var(--color-main-1);
          &::after{
            background-color: var(--color-main-1);
          }
        }

        .cross-decoration{
          opacity: 0;
          transition: opacity .3s, transform .3s;
          width: .5rem;
          height: .5rem;
          position: absolute;
          transform: translate(0);
          color: var(--color-main-3);
          transform: translate(0px, 0px);

          &-1{
            top: 0;
            left: 0;
          }
          &-2{
            top: 0;
            right: 0;
          }
          &-3{
            bottom: 12px;
            left: 0;
          }
        }

        &:hover{
          border-color: var(--color-main-3);
          background-color: color-mix(in srgb, var(--color-main-3) 50%, transparent 80%);
          box-shadow: var(--color-main-3) 0px 3px 10px;
          transition: 300ms;

          &::before{
            display: block;
          }

          &::after{
            background-color: var(--color-main-3);
            transition: opacity .3s, transform .3s;
          }

          .cross-decoration{
            opacity: 1;

            &-1{
              transform: translate(-6px,-12px);
            }
            &-2{
              transform: translate(2px, -12px);
            }
            &-3{
              transform: translate(-6px, 10px);
            }
          }
        }
        @media screen and (width >= 1024px){
          font-size: var(--size-14px);
        }
      }
    }
    .nav-icons{
      &__link{
        position: relative;
        font-size: var(--size-18px);
        width: 40px;
        height: 40px;
        display: grid;
        grid-template-areas: "stack";
        place-items: center;
        text-shadow: var(--color-text) 0px 0px 10px;

        &:hover{
          .nav-icons{
            &__corner{
              transition: all 250ms;

              &.corner-1{
                //transform: translate(-10px,-5px);
                border-top: 1px solid var(--color-main-3);
                border-left: 1px solid var(--color-main-3);
              }
              &.corner-2{
                //transform: translate(10px,5px);
                border-bottom: 1px solid var(--color-main-3);
                border-right: 1px solid var(--color-main-3);
              }
            }
            &__bg-blink{
              visibility: visible;
              animation: blink-in 0.3s cubic-bezier(1,0,0,1) forwards;
            }
          }
        }
      }
      &__corner{
        background-color: transparent;
        width: 20px;
        height: 30px;
        transition: all 250ms;

        &.corner-1{
          position: relative;
          transform: translate(-10px,-5px);
          border-top: 1px solid var(--color-main-2);
          border-left: 1px solid var(--color-main-2);
        }
        &.corner-2{
          position: relative;
          transform: translate(10px,5px);
          border-bottom: 1px solid var(--color-main-1);
          border-right: 1px solid var(--color-main-1);
        }
      }
      &__bg-blink{
        background-color: color-mix(in srgb, var(--color-main-3) 50%, transparent 80%);
        width: 100%;
        height: 100%;
        visibility: hidden;
        z-index: -1;
      }
      :is(.nav-icons__corner, .nav-icons__bg-blink, .nav-icons__icon){
        grid-area: stack;
        z-index: -1;
      }
    }
    .btn-theme{
      position: relative;
      height: 38px;
      border: 3px solid var(--color-main-3);
      border-radius: 8px;
      padding: 1px 3px;
      color: var(--color-main-3);
      display: flex;
      justify-content: center;
      flex-direction: column;
      text-transform: uppercase;
      font-weight: bolder;
      text-align: left;
      background-color: transparent;
      box-shadow: inset var(--color-main-3) 0 0 2px;
      gap: 3px;
      cursor: pointer;
      transition: 250ms;

      &__title{
        font-size: 10px;
        border-bottom: 1px solid;
        transform: scaleY(1.3);
        display: none;
      }
      &__kanji{
        font-size: 10px;
        font-weight: bolder;
        margin-left: 4px;
      }
      &__color-content{
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 0.3rem;
      }
      &__text{
        font-size: var(--size-14px);
        line-height: var(--size-20px);
      }
      &__icon{
        width: 14px;
        height: 14px;
        transition: all 250ms;
        line-height: 1;
        vertical-align: sub;
        fill: var(--color-main-3);
      }

      &:hover{
        box-shadow: inset var(--color-main-3) 0 0 12px;
        text-shadow: var(--color-main-3) 0 0 12px;
        transition: 250ms;

        :is(.btn-theme__title, .btn-theme__color-content){
          animation: blink-in 0.3s cubic-bezier(1,0,0,1) forwards;
        }
      }

      @media screen and (width >= 900px){
        height: 50px;

        &__title{
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
      }
    }
  }
  :global([data-theme='light']) {
    .navbar{
      .nav-items{
        &__link{
          text-shadow: var(--color-main-1) 0px 1px 1px;
        }
      }
      .nav-icons{
        &__link{
          text-shadow: var(--color-main-1) 0px 1px 1px;
        }
      }
      .btn-theme{
        color: var(--color-text);

        &__icon{
          fill: var(--color-text);
        }
      }
    }
  }
</style>
