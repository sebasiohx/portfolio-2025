---
import { iconPaths } from './scripts/IconPaths';
import Icon from './Icon.astro';

interface Props {
  textLinks: Array<{ label: string; href: string }>;
  iconsLinks: Array<{ label: string; href: string; icon: keyof typeof iconPaths }>;
  currentPath: string;
}

const { textLinks, iconsLinks, currentPath } = Astro.props;
---

<script>
  const iconMenu: any = document.querySelector('.menu-burguer');
  const menuMobile: any = document.getElementById('menu-mobile-aside');

  iconMenu.addEventListener(
    'click',
    () => {
      if (iconMenu.classList.contains('open')) {
        iconMenu.classList.remove('open');
        menuMobile.classList.remove('open');
      } else {
        iconMenu.classList.add('open');
        menuMobile.classList.add('open');
      }
    },
    false
  );
</script>

<!-- menu hamburguesa -->
<div class="menu-burguer__container md:hidden ml-2">
  <span class="menu-burguer__title">MENU</span>
  <button class='menu-burguer flex' aria-expanded="false" aria-haspopup="true" aria-controls="menu-mobile-aside">
    <div class='menu-line'></div>
    <div class='menu-line'></div>
    <div class='menu-line'></div>
  </button>
</div>

<!-- aside menu mobile -->
<aside id='menu-mobile-aside' class='menu-mobile'>
  <div class='container mx-auto p-4'>
    <h3 class='menu-mobile__title'>Men√∫</h3>
    <nav class='menu-mobile__nav mb-8' aria-labelledby="menu-mobile-aside">
      {
        textLinks.map(({ label, href }) => (
          <a
            class:list={[
              'menu-mobile__link',
              { active:
                  currentPath === href ||
                  (href !== '/' && currentPath.startsWith(href)),
              },
            ]}
            href={href}
          >
            {label}
          </a>
        ))
      }
    </nav>
    <ul class='flex gap-8 justify-between'>
      {
        iconsLinks.map(({ label, href, icon }) => (
          <li class='grow'>
            <a class='menu-mobile__link-icon' href={href} target="_blank" rel="noopener noreferrer">
              <span class='sr-only'>{label}</span>
              <Icon icon={icon} size="1.7rem" class="nav-icons__icon"/>
            </a>
          </li>
        ))
      }
    </ul>
    <svg
      version='1.1'
      id='Layer_1'
      class='menu-mobile__svg'
      xmlns='http://www.w3.org/2000/svg'
      xmlns:xlink='http://www.w3.org/1999/xlink'
      x='0px'
      y='0px'
      viewBox='0 0 100 100'
      enable-background='new 0 0 100 100'
      xml:space='preserve'
    >
      <rect
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 3 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'></animate>
      </rect>
      <rect
        x='17'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 20 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.1s'></animate>
      </rect>
      <rect
        x='40'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 40 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.3s'></animate>
      </rect>
      <rect
        x='60'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 58 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.5s'></animate>
      </rect>
      <rect
        x='80'
        class='fill-color'
        width='3'
        height='100'
        transform='translate(0) rotate(180 76 50)'
      >
        <animate
          attributeName='height'
          attributeType='XML'
          dur='1s'
          values='30; 100; 30'
          repeatCount='indefinite'
          begin='0.1s'></animate>
      </rect>
    </svg>
  </div>
</aside>
<style lang='scss'>
  .menu-burguer {
    flex-direction: column;
    justify-content: space-between;
    gap: 5px;
    cursor: pointer;
    padding: 0.5rem 1rem;
    clip-path: polygon(calc(0% + 10px) 0%, 100% 0%, 100% calc(100% - 10px), calc(100% - 10px) 100%, 0% 100%, 0% calc(0% + 10px));
    background-color: var(--color-main-1);

    &__container {
      position: relative;
    }
    &__title {
      position: absolute;
      top: -16px;
      left: 12px;
      font-size: var(--size-10px);
      font-weight: bold;
      color: var(--color-main-3);
    }
  }

  .menu-line {
    height: 4px;
    width: 24px;
    background-color: var(--color-bg);
    transition: all 250ms cubic-bezier(0.18, 0.89, 0.32, 1.28);
  }

  .menu-line:first-child {
    animation: firstLinetoClose 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
  }

  .open .menu-line:first-child {
    animation: firstLinetoOpen 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
    animation-fill-mode: forwards;
  }

  @keyframes firstLinetoOpen {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(12px);
    }

    100% {
      transform: translateY(9px) rotate(45deg);
    }
  }

  @keyframes firstLinetoClose {
    0% {
      transform: translateY(9px) rotate(0);
    }

    100% {
      transform: translateY(0);
    }
  }

  .open .menu-line:nth-child(2) {
    opacity: 0;
  }

  .menu-line:last-child {
    animation: lastLinetoClose 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
  }

  .open .menu-line:last-child {
    animation: lastLinetoOpen 240ms cubic-bezier(0.23, 0.95, 0.58, 1.37);
    animation-fill-mode: forwards;
  }

  @keyframes lastLinetoOpen {
    0% {
      transform: translateY(0);
    }

    50% {
      transform: translateY(-12px);
    }

    100% {
      transform: translateY(-10px) rotate(-45deg);
    }
  }

  @keyframes lastLinetoClose {
    0% {
      transform: translateY(-10px);
    }

    100% {
      transform: translateY(0);
    }
  }

  .menu-mobile {
    position: absolute;
    inset: 82px 0 0 0;
    z-index: 11;
    height: calc(100vh - 82px);
    width: 100%;
    clip-path: polygon(0 38px, 6px 38px, 20px 18px, calc(0% + 105px) calc(0% + 18px), calc(0% + 130px) 0px, 100% 0px, 100% 100%, 0px 100%);
    transform: translateX(100%);
    transition: all 250ms;
    background-color: color-mix(in srgb, var(--color-bg) 30%, transparent 100%);
    /* Glassmorphism */
    -webkit-backdrop-filter: blur(30px);
    backdrop-filter: blur(30px);

    &.open {
      transform: translateX(0%);
    }

    &__title {
      text-align: right;
      font-size: var(--size-24px);
      font-weight: bold;
      padding-right: 18px;
      margin-bottom: 32px;
      text-transform: uppercase;
      font-family: var(--font-family-1);
      transform: scaleY(1.2);
      text-shadow: var(--color-main-1) 1px 0px 4px;
    }

    &__nav {
      display: flex;
      flex-direction: column;
    }

    &__link {
      text-align: right;
      padding: 20px;
      border-bottom: 2px solid var(--color-main-1);
      position: relative;
      font-size: var(--size-16px);
      text-transform: uppercase;
      font-family: var(--font-family-2);

      &::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: 0;
        display: block;
        width: 15px;
        height: 15px;
        background-color: var(--color-main-1);
        clip-path: polygon(66% 0, 100% 0, 100% 100%, 0% 100%);
      }

      &.active {
        background-color: color-mix(
          in srgb,
          var(--color-main-2) 20%,
          transparent 100%
        );
        border-bottom-color: var(--color-main-2);
        box-shadow: var(--color-main-2) 1px 0px 1px;

        &::after {
          background-color: var(--color-main-2);
        }
      }
    }

    &__link-icon {
      display: flex;
      text-align: center;
      font-size: var(--size-26px);
      height: 50px;
      justify-content: center;
      align-items: center;
      border-top: 2px solid var(--color-main-2);
      border-left: 2px solid var(--color-main-2);
      border-right: 2px solid var(--color-main-1);
      border-bottom: 2px solid var(--color-main-1);
    }
    &__svg {
      width: 90px;
      position: fixed;
      bottom: 16px;
      right: 16px;
      opacity: 0.5;
    }
  }

  .fill-color {
    fill: var(--color-main-1);
  }

  :global([data-theme='light']) {
    .menu-burguer{
      &__title {
        color: var(--color-text);
      }
    }
    .menu-mobile__title {
      text-shadow: var(--color-main-1) 1px 0px 2px;
    }
  }
</style>